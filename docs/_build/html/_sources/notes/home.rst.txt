Quick Start
=====================================================

30 seconds to InferPy
--------------------------------------

The core data structures of InferPy is a a **probabilistic model**,
defined as a set of **random variables** with a conditional independence
structure. Like in Edward, a **random varible** is an object
parameterized by a set of tensors.

Let's look at a simple examle. We start defining the **prior** of the
parameters of a **mixture of Gaussians** model:

.. code:: python

    import numpy as np
    import inferpy as inf
    from inferpy.models import Normal, InverseGamma, Dirichlet

    # K defines the number of components. 
    K=10
    with inf.replicate(size = K)
        #Prior for the means of the Gaussians 
        mu = Normal(loc = 0, scale = 1)
        #Prior for the precision of the Gaussians 
        sigma = InverseGamma(concentration = 1, rate = 1)
        
    #Prior for the mixing proportions
    p = Dirichlet(np.ones(K))

InferPy supports the definition of **plateau notation** by using the
construct ``with inf.replicate(size = K)``, which replicates K times the
random variables enclosed within this anotator. Every replicated
variable is assumed to be **independent**.

This ``with inf.replicate(size = N)`` construct is also usefuel when
defining the model for the data:

.. code:: python

    # Number of observations
    N = 1000
    #data Model
    with inf.replicate(size = N)
        # Sample the component indicator of the mixture. This is a latent variable that can not be observed
        z_n = Multinomial(probs = p)
        # Sample the observed value from the Gaussian of the selected component.  
        x_n = Normal(loc = inf.gather(mu,z_n), scale = inf.gather(sigma,z_n), observed = true)

As commented above, the variable ``z_n`` and ``x_n`` are surrounded by a
``with`` statement to inidicate that the defined random variables will
be reapeatedly used in each data sample. In this case, every replicated
variable is conditionally idependent given the variables mu and sigma
defined outside the ``with`` statement.

Once the random variables of the model are defined, the probablitic
model itself can be created and compiled. The probabilistic model
defines a joint probability distribuiton over all these random
variables.

.. code:: python

    from inferpy import ProbModel
    probmodel = ProbModel(vars = [p,mu,sigma,z_n,x_n]) 
    probmodel.compile(infMethod = 'KLqp')

During the model compilation we specify different inference methods that
will be used to learn the model.

.. code:: python

    from inferpy import ProbModel
    probmodel = ProbModel(vars = [p,mu,sigma,z_n,x_n]) 
    probmodel.compile(infMethod = 'MCMC')

The inference method can be further configure. But, as in Keras, a core
principle is to try make things reasonbly simple, while allowing the
user the full control if needed.

.. code:: python

    from keras.optimizers import SGD
    probmodel = ProbModel(vars = [p,mu,sigma,z_n,x_n]) 
    sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)
    infklqp = inf.inference.KLqp(optimizer = sgd, loss="ELBO")
    probmodel.compile(infMethod = infklqp)

Every random variable object is equipped with methods such as
``log_prob()`` and ``sample()``. Similarly, a probabilistic model is also
equipped with the same methods. Then, we can sample data from the model
anbd compute the log-likelihood of a data set:

.. code:: python

    data = probmodel.sample(size = 100)
    log_like = probmodel.log_prob(data)

Of course, you can fit your model with a given data set:

.. code:: python

    probmodel.fit(data_training, epochs=10)

Update your probablistic model with new data using the Bayes' rule:

.. code:: python

    probmodel.update(new_data)

Query the posterior over a given random varible:

.. code:: python

    mu_post = probmodel.posterior(mu)

Evaluate your model according to a given metric:

.. code:: python

    log_like = probmodel.evaluate(test_data, metrics = ['log_likelihood'])

Or compute predicitons on new data

.. code:: python

    cluster_assignments = probmodel.predict(test_data, targetvar = z_n)

--------------

Guiding Principles
------------------

-  InferPy's probability distribuions are mainly inherited from
   TensorFlow Distribuitons package. InferPy's API is fully compatible
   with tf.distributions' API. The 'shape' argument was added as a
   simplifing option when defining multidimensional distributions.
-  InferPy directly relies on top of Edward's inference engine and
   includes all the inference algorithms included in this package. As
   Edward's inference engine relies on TensorFlow computing engine,
   InferPy also relies on it too.
-  InferPy seamsly process data contained in a numpy array, Tensorflow's
   tensor, Tensorflow's Dataset (tf.Data API) or Apache Spark's
   DataFrame.
-  InferPy also includes novel distributed statistical inference
   algorithms by combining Tensorflow and Apache Spark computing
   engines.

--------------
